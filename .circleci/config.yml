version: 2.1
orbs:
  k8s: circleci/kubernetes@0.7.0
  slack: circleci/slack@3.4.2
commands:
  git_checkout_from_cache:
    description: "Git checkout and save cache"
    steps:
      - restore_cache:
          name: Git restore cache
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
      - run:
          name: Fetch git tags
          command: |
            mkdir -p ~/.ssh
            echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ== ' >> ~/.ssh/known_hosts
            # Fetch tags if git cache is present
            if [ -e /home/circleci/project/.git ]
            then
              git fetch origin --tags
            fi
      - checkout
      - run:
          name: Compress git objects
          command: git gc
      - save_cache:
          name: Git save cache
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
  npm_install:
    description: "Install npm modules"
    steps:
      - restore_cache:
          name: Restore npm cache
          keys:
            - npm-v1-{{ checksum "package.json" }}
            - npm-v1-
      - run:
          name: Install npm modules
          command: yarn
      - save_cache:
          name: Save NPM cache
          key: npm-v1-{{ checksum "package.json" }}
          paths:
            - "node_modules"
  build:
    description: "Build"
    steps:
      - run:
          name: "yarn build"
          command: node_modules/gulp/bin/gulp.js build-min
  deploy:
    description: "Deploy to static branches"
    parameters:
      target_branch:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: www
      - run:
          name: Tag build
          command: echo "<< parameters.target_branch >> $(date -u +'%Y-%m-%dT%H:%M:%SZ')" > www/version
      - run:
          name: Install and configure dependencies
          command: |
            sudo npm install -g gh-pages@2.0.1
            git config user.email "ci-build@binary.com"
            git config user.name "ci-build"
      - add_ssh_keys:
          fingerprints:
            - "01:67:4a:6d:26:9c:70:c4:1a:60:91:88:d9:dd:f0:83"
      - run:
          name: Deploy docs to gh-pages branch
          command: gh-pages -d www --branch << parameters.target_branch >> --message '[skip ci]'
  docker_build_push:
    description: "Build and Push image to docker hub"
    parameters:
      target:
        type: string
    steps:
      - setup_remote_docker
      - run:
          name: Building docker image for << parameters.target >>
          command: |
            build_latest="latest"
            [ "<< parameters.target >>" == "beta" ]  && build_latest="beta-latest"
            docker build -t ${DOCKHUB_ORGANISATION}/binary-static-bot:${CIRCLE_TAG} -t ${DOCKHUB_ORGANISATION}/binary-static-bot:${build_latest} .
      - run:
          name: Pushing Image to docker hub
          command: |
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push ${DOCKHUB_ORGANISATION}/binary-static-bot
  k8s_deploy:
    description: "Deploy to k8s cluster"
    parameters:
      target:
        type: string
    steps:
      - k8s/install-kubectl
      - run:
          name: Deploying to k8s cluster for service binary-bot-beta
          command: |
            for SERVER_ID in {1..5}
            do
              KUBE_SERVER_REF="KUBE_SERVER_$SERVER_ID"
              SERVICEACCOUNT_TOKEN_REF="SERVICEACCOUNT_TOKEN_$SERVER_ID"
              CA_CRT_REF="CA_CRT_$SERVER_ID"
              if [ ! -z "${!KUBE_SERVER_REF}" ]
              then
                echo "Deploying to cluster $SERVER_ID"
                CA_CRT="${!CA_CRT_REF}"
                KUBE_SERVER="${!KUBE_SERVER_REF}"
                SERVICEACCOUNT_TOKEN="${!SERVICEACCOUNT_TOKEN_REF}"
                deployment_target="bot-binary-com"
                [ "<< parameters.target >>" == "beta" ] && deployment_target="bot-beta-binary-com"
                echo $CA_CRT | base64 --decode > ca.crt
                kubectl --server=${KUBE_SERVER} --certificate-authority=ca.crt --token=$SERVICEACCOUNT_TOKEN set image deployment/${deployment_target} ${deployment_target}=${DOCKHUB_ORGANISATION}/binary-static-bot:${CIRCLE_TAG}
              fi
            done
  test:
    description: "Run test"
    steps:
      - run:
          name: Run tests
          command: |
            for i in {1..3}; do npm test && break; done
  notify_slack:
    description: "Notify slack"
    steps:
      - slack/status:
          include_project_field: false
          failure_message: "Release failed for binary bot with version *$(cat www/version)*"
          success_message: "Release succeeded for binary bot with version *$(cat www/version)*"
          webhook: ${SLACK_WEBHOOK} 
jobs:
  test:
    docker:
      - image: circleci/node:12.13.0-stretch
    steps:
      - git_checkout_from_cache
      - npm_install
      - test

  release_staging:
    docker:
      - image: circleci/node:8.10.0-stretch
    steps:
      - git_checkout_from_cache
      - npm_install
      - test
      - build
      - deploy:
          target_branch: "staging"
      - notify_slack
  release_production:
    docker:
      - image: circleci/node:8.10.0-stretch
    steps:
      - git_checkout_from_cache
      - npm_install
      - test
      - build
      - deploy:
          target_branch: "production"
      - notify_slack
  release_aws_production:
    docker:
      - image: circleci/node:12.13.0-stretch
    steps:
      - git_checkout_from_cache
      - npm_install
      - test
      - build
      - docker_build_push:
          target: "production"
      - k8s_deploy:
          target: "production"

workflows:
  test:
    jobs:
      - test:
          filters:
            branches:
              ignore: /^master$/
  release:
    jobs:
      - release_staging:
          filters:
            branches:
              only: /^master$/
      - release_production:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^production.*/
      - release_aws_production:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^production.*/
          context: binary-frontend-artifact-upload
